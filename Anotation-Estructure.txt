
int vidas=0; \\10, 25
char letra='A';\\'A' -> Letras
double decimal = 5.2; \\2.4999999 -> Mais preciso
float decimal = 5.2; \\2.5 -> Menos preciso
bool vivo = True; \\Verdadeiro ou Falso
string nome = "Luiz"; \\"Luiz" -> Nome


Fluxo de dados para o Re-treinamento ------------------------------------

.tflite (só para inferência no C++)  ←── exportado de ──  modelo original (.h5 ou SavedModel)

📦 buffer de dados novos
         ↓
Python reprocessa + treina usando o modelo original (.h5)
         ↓
Novo modelo atualizado (.tflite)
         ↓
Substitui o antigo na inferência em C++



LibTorch C++ para uso e auto adaptação da ia adicionando mais classes, neuronios, entradas e saídas 
<<<<<<< HEAD
 
 C++
 CMake + LibTorch/ggml

 (fc1) aparentemente, nível de camada totalmente conectada que é utilizada junto do 'self.relu'

 to.(device0) -> onde 'device' é a gpu para a qual irá o processamento e '0' é a númeração dela em relação a quantidade
 Abreviação para o uso posterior
 device0 = torch.device('cuda:0')
 device1 = torch.device('cuda:1')
=======

-----------

Anotações c++:

Pra corrigir e ser exibido caracteres especiais como o acento no "Olá mundo" no terminal de compilação:

Inclua a biblioteca #include <locale.h>
Depois dentro do main: setlocale(LC_ALL, "Portuguese");

Em seguida: CRTL+Shift+P - Change File Encoding - Save Witch Encoding - Wetern Iso 8859-1
>>>>>>> 2fd1a4985a6780c46df062bf56231b166b43dde2
